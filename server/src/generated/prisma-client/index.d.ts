// Code generated by Prisma (prisma@1.34.8). DO NOT EDIT.
// Please don't change this file manually but run `prisma generate` to update it.
// For more information, please read the docs: https://www.prisma.io/docs/prisma-client/

import { DocumentNode } from "graphql";
import {
  makePrismaClientClass,
  BaseClientOptions,
  Model
} from "prisma-client-lib";
import { typeDefs } from "./prisma-schema";

export type AtLeastOne<T, U = { [K in keyof T]: Pick<T, K> }> = Partial<T> &
  U[keyof U];

export type Maybe<T> = T | undefined | null;

export interface Exists {
  org: (where?: OrgWhereInput) => Promise<boolean>;
  user: (where?: UserWhereInput) => Promise<boolean>;
}

export interface Node {}

export type FragmentableArray<T> = Promise<Array<T>> & Fragmentable;

export interface Fragmentable {
  $fragment<T>(fragment: string | DocumentNode): Promise<T>;
}

export interface Prisma {
  $exists: Exists;
  $graphql: <T = any>(
    query: string,
    variables?: { [key: string]: any }
  ) => Promise<T>;

  /**
   * Queries
   */

  org: (where: OrgWhereUniqueInput) => OrgNullablePromise;
  orgs: (args?: {
    where?: OrgWhereInput;
    orderBy?: OrgOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<Org>;
  orgsConnection: (args?: {
    where?: OrgWhereInput;
    orderBy?: OrgOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => OrgConnectionPromise;
  user: (where: UserWhereUniqueInput) => UserNullablePromise;
  users: (args?: {
    where?: UserWhereInput;
    orderBy?: UserOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<User>;
  usersConnection: (args?: {
    where?: UserWhereInput;
    orderBy?: UserOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => UserConnectionPromise;
  node: (args: { id: ID_Output }) => Node;

  /**
   * Mutations
   */

  createOrg: (data: OrgCreateInput) => OrgPromise;
  updateOrg: (args: {
    data: OrgUpdateInput;
    where: OrgWhereUniqueInput;
  }) => OrgPromise;
  updateManyOrgs: (args: {
    data: OrgUpdateManyMutationInput;
    where?: OrgWhereInput;
  }) => BatchPayloadPromise;
  upsertOrg: (args: {
    where: OrgWhereUniqueInput;
    create: OrgCreateInput;
    update: OrgUpdateInput;
  }) => OrgPromise;
  deleteOrg: (where: OrgWhereUniqueInput) => OrgPromise;
  deleteManyOrgs: (where?: OrgWhereInput) => BatchPayloadPromise;
  createUser: (data: UserCreateInput) => UserPromise;
  updateUser: (args: {
    data: UserUpdateInput;
    where: UserWhereUniqueInput;
  }) => UserPromise;
  updateManyUsers: (args: {
    data: UserUpdateManyMutationInput;
    where?: UserWhereInput;
  }) => BatchPayloadPromise;
  upsertUser: (args: {
    where: UserWhereUniqueInput;
    create: UserCreateInput;
    update: UserUpdateInput;
  }) => UserPromise;
  deleteUser: (where: UserWhereUniqueInput) => UserPromise;
  deleteManyUsers: (where?: UserWhereInput) => BatchPayloadPromise;

  /**
   * Subscriptions
   */

  $subscribe: Subscription;
}

export interface Subscription {
  org: (
    where?: OrgSubscriptionWhereInput
  ) => OrgSubscriptionPayloadSubscription;
  user: (
    where?: UserSubscriptionWhereInput
  ) => UserSubscriptionPayloadSubscription;
}

export interface ClientConstructor<T> {
  new (options?: BaseClientOptions): T;
}

/**
 * Types
 */

export type UserOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "handle_ASC"
  | "handle_DESC"
  | "email_ASC"
  | "email_DESC";

export type OrgOrderByInput = "id_ASC" | "id_DESC" | "name_ASC" | "name_DESC";

export type MutationType = "CREATED" | "UPDATED" | "DELETED";

export interface UserUpdateWithoutOrganizationsDataInput {
  handle?: Maybe<String>;
  email?: Maybe<String>;
}

export type OrgWhereUniqueInput = AtLeastOne<{
  id: Maybe<ID_Input>;
  name?: Maybe<String>;
}>;

export interface UserUpdateManyWithWhereNestedInput {
  where: UserScalarWhereInput;
  data: UserUpdateManyDataInput;
}

export interface OrgWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  members_every?: Maybe<UserWhereInput>;
  members_some?: Maybe<UserWhereInput>;
  members_none?: Maybe<UserWhereInput>;
  name?: Maybe<String>;
  name_not?: Maybe<String>;
  name_in?: Maybe<String[] | String>;
  name_not_in?: Maybe<String[] | String>;
  name_lt?: Maybe<String>;
  name_lte?: Maybe<String>;
  name_gt?: Maybe<String>;
  name_gte?: Maybe<String>;
  name_contains?: Maybe<String>;
  name_not_contains?: Maybe<String>;
  name_starts_with?: Maybe<String>;
  name_not_starts_with?: Maybe<String>;
  name_ends_with?: Maybe<String>;
  name_not_ends_with?: Maybe<String>;
  AND?: Maybe<OrgWhereInput[] | OrgWhereInput>;
  OR?: Maybe<OrgWhereInput[] | OrgWhereInput>;
  NOT?: Maybe<OrgWhereInput[] | OrgWhereInput>;
}

export interface UserCreateManyWithoutOrganizationsInput {
  create?: Maybe<
    UserCreateWithoutOrganizationsInput[] | UserCreateWithoutOrganizationsInput
  >;
  connect?: Maybe<UserWhereUniqueInput[] | UserWhereUniqueInput>;
}

export interface UserCreateInput {
  id?: Maybe<ID_Input>;
  handle: String;
  email: String;
  organizations?: Maybe<OrgCreateManyWithoutMembersInput>;
}

export interface UserCreateWithoutOrganizationsInput {
  id?: Maybe<ID_Input>;
  handle: String;
  email: String;
}

export interface UserUpdateManyDataInput {
  handle?: Maybe<String>;
  email?: Maybe<String>;
}

export interface OrgUpdateInput {
  members?: Maybe<UserUpdateManyWithoutOrganizationsInput>;
  name?: Maybe<String>;
}

export interface OrgSubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<OrgWhereInput>;
  AND?: Maybe<OrgSubscriptionWhereInput[] | OrgSubscriptionWhereInput>;
  OR?: Maybe<OrgSubscriptionWhereInput[] | OrgSubscriptionWhereInput>;
  NOT?: Maybe<OrgSubscriptionWhereInput[] | OrgSubscriptionWhereInput>;
}

export interface UserUpdateManyWithoutOrganizationsInput {
  create?: Maybe<
    UserCreateWithoutOrganizationsInput[] | UserCreateWithoutOrganizationsInput
  >;
  delete?: Maybe<UserWhereUniqueInput[] | UserWhereUniqueInput>;
  connect?: Maybe<UserWhereUniqueInput[] | UserWhereUniqueInput>;
  set?: Maybe<UserWhereUniqueInput[] | UserWhereUniqueInput>;
  disconnect?: Maybe<UserWhereUniqueInput[] | UserWhereUniqueInput>;
  update?: Maybe<
    | UserUpdateWithWhereUniqueWithoutOrganizationsInput[]
    | UserUpdateWithWhereUniqueWithoutOrganizationsInput
  >;
  upsert?: Maybe<
    | UserUpsertWithWhereUniqueWithoutOrganizationsInput[]
    | UserUpsertWithWhereUniqueWithoutOrganizationsInput
  >;
  deleteMany?: Maybe<UserScalarWhereInput[] | UserScalarWhereInput>;
  updateMany?: Maybe<
    UserUpdateManyWithWhereNestedInput[] | UserUpdateManyWithWhereNestedInput
  >;
}

export interface OrgUpdateManyDataInput {
  name?: Maybe<String>;
}

export interface UserUpdateWithWhereUniqueWithoutOrganizationsInput {
  where: UserWhereUniqueInput;
  data: UserUpdateWithoutOrganizationsDataInput;
}

export interface OrgScalarWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  name?: Maybe<String>;
  name_not?: Maybe<String>;
  name_in?: Maybe<String[] | String>;
  name_not_in?: Maybe<String[] | String>;
  name_lt?: Maybe<String>;
  name_lte?: Maybe<String>;
  name_gt?: Maybe<String>;
  name_gte?: Maybe<String>;
  name_contains?: Maybe<String>;
  name_not_contains?: Maybe<String>;
  name_starts_with?: Maybe<String>;
  name_not_starts_with?: Maybe<String>;
  name_ends_with?: Maybe<String>;
  name_not_ends_with?: Maybe<String>;
  AND?: Maybe<OrgScalarWhereInput[] | OrgScalarWhereInput>;
  OR?: Maybe<OrgScalarWhereInput[] | OrgScalarWhereInput>;
  NOT?: Maybe<OrgScalarWhereInput[] | OrgScalarWhereInput>;
}

export interface OrgUpdateManyWithoutMembersInput {
  create?: Maybe<OrgCreateWithoutMembersInput[] | OrgCreateWithoutMembersInput>;
  delete?: Maybe<OrgWhereUniqueInput[] | OrgWhereUniqueInput>;
  connect?: Maybe<OrgWhereUniqueInput[] | OrgWhereUniqueInput>;
  set?: Maybe<OrgWhereUniqueInput[] | OrgWhereUniqueInput>;
  disconnect?: Maybe<OrgWhereUniqueInput[] | OrgWhereUniqueInput>;
  update?: Maybe<
    | OrgUpdateWithWhereUniqueWithoutMembersInput[]
    | OrgUpdateWithWhereUniqueWithoutMembersInput
  >;
  upsert?: Maybe<
    | OrgUpsertWithWhereUniqueWithoutMembersInput[]
    | OrgUpsertWithWhereUniqueWithoutMembersInput
  >;
  deleteMany?: Maybe<OrgScalarWhereInput[] | OrgScalarWhereInput>;
  updateMany?: Maybe<
    OrgUpdateManyWithWhereNestedInput[] | OrgUpdateManyWithWhereNestedInput
  >;
}

export interface OrgUpsertWithWhereUniqueWithoutMembersInput {
  where: OrgWhereUniqueInput;
  update: OrgUpdateWithoutMembersDataInput;
  create: OrgCreateWithoutMembersInput;
}

export interface UserUpsertWithWhereUniqueWithoutOrganizationsInput {
  where: UserWhereUniqueInput;
  update: UserUpdateWithoutOrganizationsDataInput;
  create: UserCreateWithoutOrganizationsInput;
}

export interface OrgUpdateWithWhereUniqueWithoutMembersInput {
  where: OrgWhereUniqueInput;
  data: OrgUpdateWithoutMembersDataInput;
}

export interface UserScalarWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  handle?: Maybe<String>;
  handle_not?: Maybe<String>;
  handle_in?: Maybe<String[] | String>;
  handle_not_in?: Maybe<String[] | String>;
  handle_lt?: Maybe<String>;
  handle_lte?: Maybe<String>;
  handle_gt?: Maybe<String>;
  handle_gte?: Maybe<String>;
  handle_contains?: Maybe<String>;
  handle_not_contains?: Maybe<String>;
  handle_starts_with?: Maybe<String>;
  handle_not_starts_with?: Maybe<String>;
  handle_ends_with?: Maybe<String>;
  handle_not_ends_with?: Maybe<String>;
  email?: Maybe<String>;
  email_not?: Maybe<String>;
  email_in?: Maybe<String[] | String>;
  email_not_in?: Maybe<String[] | String>;
  email_lt?: Maybe<String>;
  email_lte?: Maybe<String>;
  email_gt?: Maybe<String>;
  email_gte?: Maybe<String>;
  email_contains?: Maybe<String>;
  email_not_contains?: Maybe<String>;
  email_starts_with?: Maybe<String>;
  email_not_starts_with?: Maybe<String>;
  email_ends_with?: Maybe<String>;
  email_not_ends_with?: Maybe<String>;
  AND?: Maybe<UserScalarWhereInput[] | UserScalarWhereInput>;
  OR?: Maybe<UserScalarWhereInput[] | UserScalarWhereInput>;
  NOT?: Maybe<UserScalarWhereInput[] | UserScalarWhereInput>;
}

export interface OrgCreateInput {
  id?: Maybe<ID_Input>;
  members?: Maybe<UserCreateManyWithoutOrganizationsInput>;
  name: String;
}

export interface UserWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  handle?: Maybe<String>;
  handle_not?: Maybe<String>;
  handle_in?: Maybe<String[] | String>;
  handle_not_in?: Maybe<String[] | String>;
  handle_lt?: Maybe<String>;
  handle_lte?: Maybe<String>;
  handle_gt?: Maybe<String>;
  handle_gte?: Maybe<String>;
  handle_contains?: Maybe<String>;
  handle_not_contains?: Maybe<String>;
  handle_starts_with?: Maybe<String>;
  handle_not_starts_with?: Maybe<String>;
  handle_ends_with?: Maybe<String>;
  handle_not_ends_with?: Maybe<String>;
  email?: Maybe<String>;
  email_not?: Maybe<String>;
  email_in?: Maybe<String[] | String>;
  email_not_in?: Maybe<String[] | String>;
  email_lt?: Maybe<String>;
  email_lte?: Maybe<String>;
  email_gt?: Maybe<String>;
  email_gte?: Maybe<String>;
  email_contains?: Maybe<String>;
  email_not_contains?: Maybe<String>;
  email_starts_with?: Maybe<String>;
  email_not_starts_with?: Maybe<String>;
  email_ends_with?: Maybe<String>;
  email_not_ends_with?: Maybe<String>;
  organizations_every?: Maybe<OrgWhereInput>;
  organizations_some?: Maybe<OrgWhereInput>;
  organizations_none?: Maybe<OrgWhereInput>;
  AND?: Maybe<UserWhereInput[] | UserWhereInput>;
  OR?: Maybe<UserWhereInput[] | UserWhereInput>;
  NOT?: Maybe<UserWhereInput[] | UserWhereInput>;
}

export interface UserUpdateManyMutationInput {
  handle?: Maybe<String>;
  email?: Maybe<String>;
}

export type UserWhereUniqueInput = AtLeastOne<{
  id: Maybe<ID_Input>;
  handle?: Maybe<String>;
  email?: Maybe<String>;
}>;

export interface OrgCreateManyWithoutMembersInput {
  create?: Maybe<OrgCreateWithoutMembersInput[] | OrgCreateWithoutMembersInput>;
  connect?: Maybe<OrgWhereUniqueInput[] | OrgWhereUniqueInput>;
}

export interface OrgCreateWithoutMembersInput {
  id?: Maybe<ID_Input>;
  name: String;
}

export interface OrgUpdateManyMutationInput {
  name?: Maybe<String>;
}

export interface UserUpdateInput {
  handle?: Maybe<String>;
  email?: Maybe<String>;
  organizations?: Maybe<OrgUpdateManyWithoutMembersInput>;
}

export interface OrgUpdateWithoutMembersDataInput {
  name?: Maybe<String>;
}

export interface OrgUpdateManyWithWhereNestedInput {
  where: OrgScalarWhereInput;
  data: OrgUpdateManyDataInput;
}

export interface UserSubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<UserWhereInput>;
  AND?: Maybe<UserSubscriptionWhereInput[] | UserSubscriptionWhereInput>;
  OR?: Maybe<UserSubscriptionWhereInput[] | UserSubscriptionWhereInput>;
  NOT?: Maybe<UserSubscriptionWhereInput[] | UserSubscriptionWhereInput>;
}

export interface NodeNode {
  id: ID_Output;
}

export interface UserPreviousValues {
  id: ID_Output;
  handle: String;
  email: String;
}

export interface UserPreviousValuesPromise
  extends Promise<UserPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  handle: () => Promise<String>;
  email: () => Promise<String>;
}

export interface UserPreviousValuesSubscription
  extends Promise<AsyncIterator<UserPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  handle: () => Promise<AsyncIterator<String>>;
  email: () => Promise<AsyncIterator<String>>;
}

export interface OrgEdge {
  node: Org;
  cursor: String;
}

export interface OrgEdgePromise extends Promise<OrgEdge>, Fragmentable {
  node: <T = OrgPromise>() => T;
  cursor: () => Promise<String>;
}

export interface OrgEdgeSubscription
  extends Promise<AsyncIterator<OrgEdge>>,
    Fragmentable {
  node: <T = OrgSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface OrgPreviousValues {
  id: ID_Output;
  name: String;
}

export interface OrgPreviousValuesPromise
  extends Promise<OrgPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  name: () => Promise<String>;
}

export interface OrgPreviousValuesSubscription
  extends Promise<AsyncIterator<OrgPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  name: () => Promise<AsyncIterator<String>>;
}

export interface BatchPayload {
  count: Long;
}

export interface BatchPayloadPromise
  extends Promise<BatchPayload>,
    Fragmentable {
  count: () => Promise<Long>;
}

export interface BatchPayloadSubscription
  extends Promise<AsyncIterator<BatchPayload>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Long>>;
}

export interface UserSubscriptionPayload {
  mutation: MutationType;
  node: User;
  updatedFields: String[];
  previousValues: UserPreviousValues;
}

export interface UserSubscriptionPayloadPromise
  extends Promise<UserSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = UserPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = UserPreviousValuesPromise>() => T;
}

export interface UserSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<UserSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = UserSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = UserPreviousValuesSubscription>() => T;
}

export interface OrgSubscriptionPayload {
  mutation: MutationType;
  node: Org;
  updatedFields: String[];
  previousValues: OrgPreviousValues;
}

export interface OrgSubscriptionPayloadPromise
  extends Promise<OrgSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = OrgPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = OrgPreviousValuesPromise>() => T;
}

export interface OrgSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<OrgSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = OrgSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = OrgPreviousValuesSubscription>() => T;
}

export interface Org {
  id: ID_Output;
  name: String;
}

export interface OrgPromise extends Promise<Org>, Fragmentable {
  id: () => Promise<ID_Output>;
  members: <T = FragmentableArray<User>>(args?: {
    where?: UserWhereInput;
    orderBy?: UserOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  name: () => Promise<String>;
}

export interface OrgSubscription
  extends Promise<AsyncIterator<Org>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  members: <T = Promise<AsyncIterator<UserSubscription>>>(args?: {
    where?: UserWhereInput;
    orderBy?: UserOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  name: () => Promise<AsyncIterator<String>>;
}

export interface OrgNullablePromise extends Promise<Org | null>, Fragmentable {
  id: () => Promise<ID_Output>;
  members: <T = FragmentableArray<User>>(args?: {
    where?: UserWhereInput;
    orderBy?: UserOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  name: () => Promise<String>;
}

export interface OrgConnection {
  pageInfo: PageInfo;
  edges: OrgEdge[];
}

export interface OrgConnectionPromise
  extends Promise<OrgConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<OrgEdge>>() => T;
  aggregate: <T = AggregateOrgPromise>() => T;
}

export interface OrgConnectionSubscription
  extends Promise<AsyncIterator<OrgConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<OrgEdgeSubscription>>>() => T;
  aggregate: <T = AggregateOrgSubscription>() => T;
}

export interface PageInfo {
  hasNextPage: Boolean;
  hasPreviousPage: Boolean;
  startCursor?: String;
  endCursor?: String;
}

export interface PageInfoPromise extends Promise<PageInfo>, Fragmentable {
  hasNextPage: () => Promise<Boolean>;
  hasPreviousPage: () => Promise<Boolean>;
  startCursor: () => Promise<String>;
  endCursor: () => Promise<String>;
}

export interface PageInfoSubscription
  extends Promise<AsyncIterator<PageInfo>>,
    Fragmentable {
  hasNextPage: () => Promise<AsyncIterator<Boolean>>;
  hasPreviousPage: () => Promise<AsyncIterator<Boolean>>;
  startCursor: () => Promise<AsyncIterator<String>>;
  endCursor: () => Promise<AsyncIterator<String>>;
}

export interface AggregateUser {
  count: Int;
}

export interface AggregateUserPromise
  extends Promise<AggregateUser>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateUserSubscription
  extends Promise<AsyncIterator<AggregateUser>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface User {
  id: ID_Output;
  handle: String;
  email: String;
}

export interface UserPromise extends Promise<User>, Fragmentable {
  id: () => Promise<ID_Output>;
  handle: () => Promise<String>;
  email: () => Promise<String>;
  organizations: <T = FragmentableArray<Org>>(args?: {
    where?: OrgWhereInput;
    orderBy?: OrgOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
}

export interface UserSubscription
  extends Promise<AsyncIterator<User>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  handle: () => Promise<AsyncIterator<String>>;
  email: () => Promise<AsyncIterator<String>>;
  organizations: <T = Promise<AsyncIterator<OrgSubscription>>>(args?: {
    where?: OrgWhereInput;
    orderBy?: OrgOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
}

export interface UserNullablePromise
  extends Promise<User | null>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  handle: () => Promise<String>;
  email: () => Promise<String>;
  organizations: <T = FragmentableArray<Org>>(args?: {
    where?: OrgWhereInput;
    orderBy?: OrgOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
}

export interface AggregateOrg {
  count: Int;
}

export interface AggregateOrgPromise
  extends Promise<AggregateOrg>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateOrgSubscription
  extends Promise<AsyncIterator<AggregateOrg>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface UserConnection {
  pageInfo: PageInfo;
  edges: UserEdge[];
}

export interface UserConnectionPromise
  extends Promise<UserConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<UserEdge>>() => T;
  aggregate: <T = AggregateUserPromise>() => T;
}

export interface UserConnectionSubscription
  extends Promise<AsyncIterator<UserConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<UserEdgeSubscription>>>() => T;
  aggregate: <T = AggregateUserSubscription>() => T;
}

export interface UserEdge {
  node: User;
  cursor: String;
}

export interface UserEdgePromise extends Promise<UserEdge>, Fragmentable {
  node: <T = UserPromise>() => T;
  cursor: () => Promise<String>;
}

export interface UserEdgeSubscription
  extends Promise<AsyncIterator<UserEdge>>,
    Fragmentable {
  node: <T = UserSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

/*
The `Boolean` scalar type represents `true` or `false`.
*/
export type Boolean = boolean;

/*
The `Int` scalar type represents non-fractional signed whole numeric values. Int can represent values between -(2^31) and 2^31 - 1.
*/
export type Int = number;

export type Long = string;

/*
The `ID` scalar type represents a unique identifier, often used to refetch an object or as key for a cache. The ID type appears in a JSON response as a String; however, it is not intended to be human-readable. When expected as an input type, any string (such as `"4"`) or integer (such as `4`) input value will be accepted as an ID.
*/
export type ID_Input = string | number;
export type ID_Output = string;

/*
The `String` scalar type represents textual data, represented as UTF-8 character sequences. The String type is most often used by GraphQL to represent free-form human-readable text.
*/
export type String = string;

/**
 * Model Metadata
 */

export const models: Model[] = [
  {
    name: "User",
    embedded: false
  },
  {
    name: "Org",
    embedded: false
  }
];

/**
 * Type Defs
 */

export const prisma: Prisma;
