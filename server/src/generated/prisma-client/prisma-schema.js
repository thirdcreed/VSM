module.exports = {
        typeDefs: // Code generated by Prisma (prisma@1.34.8). DO NOT EDIT.
  // Please don't change this file manually but run `prisma generate` to update it.
  // For more information, please read the docs: https://www.prisma.io/docs/prisma-client/

/* GraphQL */ `type AggregateOrg {
  count: Int!
}

type AggregateUser {
  count: Int!
}

type BatchPayload {
  count: Long!
}

scalar Long

type Mutation {
  createOrg(data: OrgCreateInput!): Org!
  updateOrg(data: OrgUpdateInput!, where: OrgWhereUniqueInput!): Org
  updateManyOrgs(data: OrgUpdateManyMutationInput!, where: OrgWhereInput): BatchPayload!
  upsertOrg(where: OrgWhereUniqueInput!, create: OrgCreateInput!, update: OrgUpdateInput!): Org!
  deleteOrg(where: OrgWhereUniqueInput!): Org
  deleteManyOrgs(where: OrgWhereInput): BatchPayload!
  createUser(data: UserCreateInput!): User!
  updateUser(data: UserUpdateInput!, where: UserWhereUniqueInput!): User
  updateManyUsers(data: UserUpdateManyMutationInput!, where: UserWhereInput): BatchPayload!
  upsertUser(where: UserWhereUniqueInput!, create: UserCreateInput!, update: UserUpdateInput!): User!
  deleteUser(where: UserWhereUniqueInput!): User
  deleteManyUsers(where: UserWhereInput): BatchPayload!
}

enum MutationType {
  CREATED
  UPDATED
  DELETED
}

interface Node {
  id: ID!
}

type Org {
  id: ID!
  members(where: UserWhereInput, orderBy: UserOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [User!]
  name: String!
}

type OrgConnection {
  pageInfo: PageInfo!
  edges: [OrgEdge]!
  aggregate: AggregateOrg!
}

input OrgCreateInput {
  id: ID
  members: UserCreateManyWithoutOrganizationsInput
  name: String!
}

input OrgCreateManyWithoutMembersInput {
  create: [OrgCreateWithoutMembersInput!]
  connect: [OrgWhereUniqueInput!]
}

input OrgCreateWithoutMembersInput {
  id: ID
  name: String!
}

type OrgEdge {
  node: Org!
  cursor: String!
}

enum OrgOrderByInput {
  id_ASC
  id_DESC
  name_ASC
  name_DESC
}

type OrgPreviousValues {
  id: ID!
  name: String!
}

input OrgScalarWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  name: String
  name_not: String
  name_in: [String!]
  name_not_in: [String!]
  name_lt: String
  name_lte: String
  name_gt: String
  name_gte: String
  name_contains: String
  name_not_contains: String
  name_starts_with: String
  name_not_starts_with: String
  name_ends_with: String
  name_not_ends_with: String
  AND: [OrgScalarWhereInput!]
  OR: [OrgScalarWhereInput!]
  NOT: [OrgScalarWhereInput!]
}

type OrgSubscriptionPayload {
  mutation: MutationType!
  node: Org
  updatedFields: [String!]
  previousValues: OrgPreviousValues
}

input OrgSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: OrgWhereInput
  AND: [OrgSubscriptionWhereInput!]
  OR: [OrgSubscriptionWhereInput!]
  NOT: [OrgSubscriptionWhereInput!]
}

input OrgUpdateInput {
  members: UserUpdateManyWithoutOrganizationsInput
  name: String
}

input OrgUpdateManyDataInput {
  name: String
}

input OrgUpdateManyMutationInput {
  name: String
}

input OrgUpdateManyWithoutMembersInput {
  create: [OrgCreateWithoutMembersInput!]
  delete: [OrgWhereUniqueInput!]
  connect: [OrgWhereUniqueInput!]
  set: [OrgWhereUniqueInput!]
  disconnect: [OrgWhereUniqueInput!]
  update: [OrgUpdateWithWhereUniqueWithoutMembersInput!]
  upsert: [OrgUpsertWithWhereUniqueWithoutMembersInput!]
  deleteMany: [OrgScalarWhereInput!]
  updateMany: [OrgUpdateManyWithWhereNestedInput!]
}

input OrgUpdateManyWithWhereNestedInput {
  where: OrgScalarWhereInput!
  data: OrgUpdateManyDataInput!
}

input OrgUpdateWithoutMembersDataInput {
  name: String
}

input OrgUpdateWithWhereUniqueWithoutMembersInput {
  where: OrgWhereUniqueInput!
  data: OrgUpdateWithoutMembersDataInput!
}

input OrgUpsertWithWhereUniqueWithoutMembersInput {
  where: OrgWhereUniqueInput!
  update: OrgUpdateWithoutMembersDataInput!
  create: OrgCreateWithoutMembersInput!
}

input OrgWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  members_every: UserWhereInput
  members_some: UserWhereInput
  members_none: UserWhereInput
  name: String
  name_not: String
  name_in: [String!]
  name_not_in: [String!]
  name_lt: String
  name_lte: String
  name_gt: String
  name_gte: String
  name_contains: String
  name_not_contains: String
  name_starts_with: String
  name_not_starts_with: String
  name_ends_with: String
  name_not_ends_with: String
  AND: [OrgWhereInput!]
  OR: [OrgWhereInput!]
  NOT: [OrgWhereInput!]
}

input OrgWhereUniqueInput {
  id: ID
  name: String
}

type PageInfo {
  hasNextPage: Boolean!
  hasPreviousPage: Boolean!
  startCursor: String
  endCursor: String
}

type Query {
  org(where: OrgWhereUniqueInput!): Org
  orgs(where: OrgWhereInput, orderBy: OrgOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Org]!
  orgsConnection(where: OrgWhereInput, orderBy: OrgOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): OrgConnection!
  user(where: UserWhereUniqueInput!): User
  users(where: UserWhereInput, orderBy: UserOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [User]!
  usersConnection(where: UserWhereInput, orderBy: UserOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): UserConnection!
  node(id: ID!): Node
}

type Subscription {
  org(where: OrgSubscriptionWhereInput): OrgSubscriptionPayload
  user(where: UserSubscriptionWhereInput): UserSubscriptionPayload
}

type User {
  id: ID!
  handle: String!
  email: String!
  organizations(where: OrgWhereInput, orderBy: OrgOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Org!]
}

type UserConnection {
  pageInfo: PageInfo!
  edges: [UserEdge]!
  aggregate: AggregateUser!
}

input UserCreateInput {
  id: ID
  handle: String!
  email: String!
  organizations: OrgCreateManyWithoutMembersInput
}

input UserCreateManyWithoutOrganizationsInput {
  create: [UserCreateWithoutOrganizationsInput!]
  connect: [UserWhereUniqueInput!]
}

input UserCreateWithoutOrganizationsInput {
  id: ID
  handle: String!
  email: String!
}

type UserEdge {
  node: User!
  cursor: String!
}

enum UserOrderByInput {
  id_ASC
  id_DESC
  handle_ASC
  handle_DESC
  email_ASC
  email_DESC
}

type UserPreviousValues {
  id: ID!
  handle: String!
  email: String!
}

input UserScalarWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  handle: String
  handle_not: String
  handle_in: [String!]
  handle_not_in: [String!]
  handle_lt: String
  handle_lte: String
  handle_gt: String
  handle_gte: String
  handle_contains: String
  handle_not_contains: String
  handle_starts_with: String
  handle_not_starts_with: String
  handle_ends_with: String
  handle_not_ends_with: String
  email: String
  email_not: String
  email_in: [String!]
  email_not_in: [String!]
  email_lt: String
  email_lte: String
  email_gt: String
  email_gte: String
  email_contains: String
  email_not_contains: String
  email_starts_with: String
  email_not_starts_with: String
  email_ends_with: String
  email_not_ends_with: String
  AND: [UserScalarWhereInput!]
  OR: [UserScalarWhereInput!]
  NOT: [UserScalarWhereInput!]
}

type UserSubscriptionPayload {
  mutation: MutationType!
  node: User
  updatedFields: [String!]
  previousValues: UserPreviousValues
}

input UserSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: UserWhereInput
  AND: [UserSubscriptionWhereInput!]
  OR: [UserSubscriptionWhereInput!]
  NOT: [UserSubscriptionWhereInput!]
}

input UserUpdateInput {
  handle: String
  email: String
  organizations: OrgUpdateManyWithoutMembersInput
}

input UserUpdateManyDataInput {
  handle: String
  email: String
}

input UserUpdateManyMutationInput {
  handle: String
  email: String
}

input UserUpdateManyWithoutOrganizationsInput {
  create: [UserCreateWithoutOrganizationsInput!]
  delete: [UserWhereUniqueInput!]
  connect: [UserWhereUniqueInput!]
  set: [UserWhereUniqueInput!]
  disconnect: [UserWhereUniqueInput!]
  update: [UserUpdateWithWhereUniqueWithoutOrganizationsInput!]
  upsert: [UserUpsertWithWhereUniqueWithoutOrganizationsInput!]
  deleteMany: [UserScalarWhereInput!]
  updateMany: [UserUpdateManyWithWhereNestedInput!]
}

input UserUpdateManyWithWhereNestedInput {
  where: UserScalarWhereInput!
  data: UserUpdateManyDataInput!
}

input UserUpdateWithoutOrganizationsDataInput {
  handle: String
  email: String
}

input UserUpdateWithWhereUniqueWithoutOrganizationsInput {
  where: UserWhereUniqueInput!
  data: UserUpdateWithoutOrganizationsDataInput!
}

input UserUpsertWithWhereUniqueWithoutOrganizationsInput {
  where: UserWhereUniqueInput!
  update: UserUpdateWithoutOrganizationsDataInput!
  create: UserCreateWithoutOrganizationsInput!
}

input UserWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  handle: String
  handle_not: String
  handle_in: [String!]
  handle_not_in: [String!]
  handle_lt: String
  handle_lte: String
  handle_gt: String
  handle_gte: String
  handle_contains: String
  handle_not_contains: String
  handle_starts_with: String
  handle_not_starts_with: String
  handle_ends_with: String
  handle_not_ends_with: String
  email: String
  email_not: String
  email_in: [String!]
  email_not_in: [String!]
  email_lt: String
  email_lte: String
  email_gt: String
  email_gte: String
  email_contains: String
  email_not_contains: String
  email_starts_with: String
  email_not_starts_with: String
  email_ends_with: String
  email_not_ends_with: String
  organizations_every: OrgWhereInput
  organizations_some: OrgWhereInput
  organizations_none: OrgWhereInput
  AND: [UserWhereInput!]
  OR: [UserWhereInput!]
  NOT: [UserWhereInput!]
}

input UserWhereUniqueInput {
  id: ID
  handle: String
  email: String
}
`
      }
    